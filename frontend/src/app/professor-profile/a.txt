/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
"use client";
import React, { useState, useEffect, FormEvent } from "react";
import PatentsTab from "@/components/shared/patentstab";

import axios from "axios";
import { motion } from "framer-motion";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";
import {
  Award,
  Briefcase,
  Globe,
  GraduationCap,
  Video,
  BookOpen,
  Plus,
  User,
  Loader2,
  Bell,
  Building,
  ThumbsUp,
  ThumbsDown,
  MessageCircle,
  Eye,
  BookX,
  Calendar,
  X,
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Footer } from "@/components/shared/Footer";
import { useParams } from "next/navigation";
import Link from "next/link";
import { Textarea } from "@/components/ui/textarea";
import { API_URL } from "@/constants";
import NavbarWithBg from "@/components/shared/NavbarWithbg";
import { PROFESSORPAGE } from "../../../../public";

interface AppliedApplicant {
  id: string;
  name: string;
  email: string;
  phoneNumber: string;
  image: string;
}

interface ApplicationsResponse {
  professorApplications: AppliedApplicant[];
  studentApplications: AppliedApplicant[];
  businessApplications: AppliedApplicant[];
}

interface Patent {
  id: string;
  title: string;
  description: string;
  imageUrl: string[];
  createdAt: string;
  professorId: string;
}

interface Professor {
  id: string;
  fullName: string;
  email: string;
  phoneNumber: string;
  location: string;
  photoUrl: string;
  title: string;
  university: string;
  website: string;
  degree: string;
  department: string;
  position: string;
  researchInterests: Array<{
    title: string;
    description: string;
    imageUrl: string;
  }>;
  positions: Array<{
    id: string;
    title: string;
    institution: string;
    startYear: string;
    endYear?: string;
    current: boolean;
  }>;
  achievements: Array<{ id: string; year: string; description: string }>;
  blogs: any;
  projects: Array<{ id: string; topic: string; status: string }>;
  tags: Array<{
    category: string;
    subcategory: string;
  }>;
}

interface SelectedImage {
  url: string;
  title: string;
}

// interface ImageModalProps {
//   isOpen: boolean;
//   onClose: () => void;
//   selectedImage: SelectedImage | null;
// }

interface Webinar {
  id: string;
  title: string;
  topic: string;
  place: string;
  date: string;
  maxAttendees: number;
  duration: number;
  isOnline: boolean;
  meetingLink?: string;
  status: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
  webinarImage?: string;
  webinarDocument?: string;
}

interface Project {
  id: string;
  topic: string;
  content: string;
  difficulty?: "EASY" | "INTERMEDIATE" | "HARD";
  timeline?: string;
  tags: string[];
  status: "OPEN" | "ONGOING" | "CLOSED";
  type: "PROFESSOR_PROJECT" | "STUDENT_PROPOSAL" | "BUSINESS_PROJECT";
  category:
    | "PROFESSOR_COLLABORATION"
    | "INDUSTRY_COLLABORATION"
    | "INTERNSHIP"
    | "PHD_POSITION"
    | "RND_PROJECT";
  professor?: {
    fullName: string;
    email: string;
    phoneNumber: string;
    university: string;
    department: string;
  };
  duration?: {
    startDate: string;
    endDate: string;
  };
}

interface AppliedStudent {
  projectId: string;
  studentId: string;
  name: string;
  email: string;
  phoneNumber: string;
}

type Notification = {
  id: string;
  type: "COMMENT" | "LIKE" | "DISLIKE";
  content: string;
  createdAt: string;
  isRead: boolean;
  professorId: string;
  blogId?: string;
  webinarId?: string;
  discussionId?: string;
  projectId?: string;
};

interface BusinessProject {
  id: string;
  topic: string;
  content: string;
  status: "ONGOING";
  type: "BUSINESS";
  professor: {
    id: string;
    fullName: string;
  };
}

const ProfessorProfilePage: React.FC = () => {
  const { id } = useParams();
  const [professor, setProfessor] = useState<Professor | null>(null);
  const [webinars, setWebinars] = useState<Webinar[]>([]);
  const [isWebinarDialogOpen, setIsWebinarDialogOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [projects, setProjects] = useState<Project[]>([]);
  const [isProjectDialogOpen, setIsProjectDialogOpen] = useState(false);
  const [appliedStudentsMap, setAppliedStudentsMap] = useState<{
    [projectId: string]: AppliedStudent[];
  }>({});
  const [isCreatingProject, setIsCreatingProject] = useState(false);

  const [isLoggedInUser, setIsLoggedInUser] = useState(false);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState<number>(0);
  const [businessProjects, setBusinessProjects] = useState<BusinessProject[]>(
    []
  );

  const [collaborationType, setCollaborationType] = useState("");
  const [studentOpportunityType, setStudentOpportunityType] = useState("");
  const [isLoadingBusinessProjects, setIsLoadingBusinessProjects] =
    useState(true);

  const [businessProjectsError, setBusinessProjectsError] = useState<
    string | null
  >(null);

  const [patents, setPatents] = useState<Patent[]>([]);
  const [isPatentDialogOpen, setIsPatentDialogOpen] = useState(false);
  const [isCreatingPatent, setIsCreatingPatent] = useState(false);

  const [fellowProfessorProjects, setFellowProfessorProjects] = useState<
    Project[]
  >([]);
  const [industryProjects, setIndustryProjects] = useState<Project[]>([]);
  const [studentProjects, setStudentProjects] = useState<{
    rnd: Project[];
    phd: Project[];
    internship: Project[];
  }>({
    rnd: [],
    phd: [],
    internship: [],
  });

  const openModal = (imageUrl: string, title: string) => {
    setSelectedImage({ url: imageUrl, title });
  };
  const [selectedImage, setSelectedImage] = useState<SelectedImage | null>(
    null
  );
  const [appliedApplicantsMap, setAppliedApplicantsMap] = useState<{
    [projectId: string]: AppliedApplicant[];
  }>({});

  const [isLoadingApplicants, setIsLoadingApplicants] = useState<{
    [projectId: string]: boolean;
  }>({});

  const closeModal = () => {
    setSelectedImage(null);
  };
  useEffect(() => {
    const fetchProfessorData = async () => {
      try {
        const token = localStorage.getItem("token");
        const loggedInUserId = localStorage.getItem("userId");
        setIsLoggedInUser(id === loggedInUserId);

        const professorResponse = await axios.get(
          `${API_URL}/professors/${id}`
        );
        setProfessor(professorResponse.data);

        if (isLoggedInUser && token) {
          const [
            webinarsResponse,
            projectsResponse,
            notificationsResponse,
            // patentsResponse,
          ] = await Promise.all([
            axios.get(`${API_URL}/webinars/professor/${id}`, {
              headers: { Authorization: `Bearer ${token}` },
            }),
            // axios.get(`${API_URL}/project/professor/${id}/projects`, {
            //   headers: { Authorization: `Bearer ${token}` },
            // }),
            axios.get(`${API_URL}/notifications/professor/${id}`, {
              headers: { Authorization: `Bearer ${token}` },
            }),
            axios.get(`${API_URL}/patents/professor/${id}`, {
              headers: { Authorization: `Bearer ${token}` },
            }),
          ]);

          setWebinars(webinarsResponse.data);
          setProjects(projectsResponse.data);
          setNotifications(notificationsResponse.data);
          // setPatents(patentsResponse.data);
          setUnreadCount(
            notificationsResponse.data.filter((n: any) => !n.isRead).length
          );

          try {
            const businessProjectsResponse = await axios.get(
              `${API_URL}/project/professor/${id}/projects/professors`,
              { headers: { Authorization: `Bearer ${token}` } }
            );
            setBusinessProjects(businessProjectsResponse.data);
          } catch (error) {
            console.error("Error fetching business projects:", error);
            setBusinessProjectsError(
              "Failed to load business projects. Please try again."
            );
          }
        }

        setIsLoading(false);
      } catch (error) {
        console.error("Error fetching data:", error);
        setError("Failed to load data. Please try again.");
      } finally {
        setIsLoading(false);
        setIsLoadingBusinessProjects(false);
      }
    };

    fetchProfessorData();
  }, [id, isLoggedInUser]);

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const token = localStorage.getItem("token");

        // Fetch projects for fellow professors
        const fellowProfessorResponse = await axios.get(`${API_URL}/project`, {
          params: {
            type: "PROFESSOR_PROJECT",
            category: "PROFESSOR_COLLABORATION",
          },
        });
        setFellowProfessorProjects(fellowProfessorResponse.data);

        // Fetch projects for industry
        const industryResponse = await axios.get(`${API_URL}/project`, {
          params: {
            type: "PROFESSOR_PROJECT",
            category: "INDUSTRY_COLLABORATION",
          },
        });
        setIndustryProjects(industryResponse.data);

        // Fetch projects for students (R&D, PhD, Internship)
        const rndResponse = await axios.get(`${API_URL}/project`, {
          params: {
            type: "PROFESSOR_PROJECT",
            category: "RND_PROJECT",
          },
        });
        const phdResponse = await axios.get(`${API_URL}/project`, {
          params: {
            type: "PROFESSOR_PROJECT",
            category: "PHD_POSITION",
          },
        });
        const internshipResponse = await axios.get(`${API_URL}/project`, {
          params: {
            type: "PROFESSOR_PROJECT",
            category: "INTERNSHIP",
          },
        });

        setStudentProjects({
          rnd: rndResponse.data,
          phd: phdResponse.data,
          internship: internshipResponse.data,
        });
      } catch (error) {
        console.error("Error fetching projects:", error);
      }
    };

    fetchProjects();
  }, []);

  const fetchAppliedApplicants = async (projectId: string) => {
    setIsLoadingApplicants((prev) => ({ ...prev, [projectId]: true }));
    try {
      const token = localStorage.getItem("token");
      const response = await axios.get<ApplicationsResponse>(
        `${API_URL}/project/${projectId}/applications`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      const allApplications: AppliedApplicant[] = [
        ...response.data.professorApplications,
        ...response.data.studentApplications,
        ...response.data.businessApplications,
      ];

      setAppliedApplicantsMap((prevMap) => ({
        ...prevMap,
        [projectId]: allApplications,
      }));
    } catch (error) {
      console.error("Error fetching applied applicants:", error);
      setError("Failed to fetch applied applicants. Please try again.");
    } finally {
      setIsLoadingApplicants((prev) => ({ ...prev, [projectId]: false }));
    }
  };
  const toggleApplicants = (projectId: string) => {
    if (appliedApplicantsMap[projectId]) {
      setAppliedApplicantsMap((prevMap) => {
        const newMap = { ...prevMap };
        delete newMap[projectId];
        return newMap;
      });
    } else {
      fetchAppliedApplicants(projectId);
    }
  };

  const handleCreateWebinar = async (
    webinarData: any,
    webinarImage: File | null,
    webinarDocument: File | null
  ) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        throw new Error("No authentication token found");
      }

      const formData = new FormData();

      // Append webinar data
      Object.keys(webinarData).forEach((key) => {
        formData.append(key, webinarData[key]);
      });

      // Append image if it exists
      if (webinarImage) {
        formData.append("webinarImage", webinarImage);
      }

      // Append document if it exists
      if (webinarDocument) {
        formData.append("webinarDocument", webinarDocument);
      }

      console.log("Sending webinar data:", webinarData);
      console.log("Sending webinar image:", webinarImage);
      console.log("Sending webinar document:", webinarDocument);

      const response = await axios.post(`${API_URL}/webinars`, formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
      });

      console.log("Server response:", response.data);

      setWebinars((prevWebinars) => [...prevWebinars, response.data]);
      setIsWebinarDialogOpen(false);
    } catch (error) {
      console.error("Error creating webinar:", error);
      if (axios.isAxiosError(error)) {
        console.error("Response data:", error.response?.data);
        console.error("Response status:", error.response?.status);
        console.error("Response headers:", error.response?.headers);
      }
      setError("Failed to create webinar. Please try again.");
    }
  };
  const handleUpdateWebinarStatus = async (
    webinarId: string,
    newStatus: "COMPLETED" | "CANCELLED"
  ) => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.put(
        `${API_URL}/webinars/${webinarId}/professor-status`,
        { status: newStatus },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setWebinars(
        webinars.map((w) => (w.id === webinarId ? response.data : w))
      );
    } catch (error) {
      console.error("Error updating webinar status:", error);
      setError("Failed to update webinar status. Please try again.");
    }
  };

  const handleCreateProject = async (projectData: any) => {
    setIsCreatingProject(true);
    try {
      const token = localStorage.getItem("token");
      let endpoint = `${API_URL}/project`;
      let data = {};

      if (collaborationType === "professors") {
        endpoint += "/professor-collaboration";
        data = {
          ...projectData,
          professorId: id,
        };
      } else if (collaborationType === "students") {
        endpoint += "/student-opportunity";
        data = {
          ...projectData,
          professorId: id,
          category: studentOpportunityType.toUpperCase(),
        };
      } else if (collaborationType === "industries") {
        endpoint += "/industry-collaboration";
        data = {
          ...projectData,
          professorId: id,
        };
      } else {
        throw new Error("Invalid collaboration type selected.");
      }

      const response = await axios.post(endpoint, data, {
        headers: { Authorization: `Bearer ${token}` },
      });

      setProjects([...projects, response.data]);
      setIsProjectDialogOpen(false);
    } catch (error) {
      console.error("Error creating project:", error);
      setError("Failed to create project. Please try again.");
    } finally {
      setIsCreatingProject(false);
    }
  };
  const renderProjectsTab = () => (
    <TabsContent value="projects">
      <motion.div
        className="space-y-8"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Dialog
          open={isProjectDialogOpen}
          onOpenChange={setIsProjectDialogOpen}
        >
          <DialogTrigger asChild>
            <Button className="bg-[#eb5e17] hover:bg-[#472014] text-white">
              <Plus className="mr-2" />
              Create Project
            </Button>
          </DialogTrigger>
          <DialogContent className="border-[#eb5e17]">
            <DialogHeader className="bg-[#eb5e17] text-white p-4 rounded-t-lg">
              <DialogTitle>Create a New Project</DialogTitle>
            </DialogHeader>
            <div className="h-[500px] overflow-y-auto border rounded-lg p-4">
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <Label>Collaboration Type</Label>
                  <Select
                    name="collaborationType"
                    value={collaborationType}
                    onValueChange={(value) => {
                      setCollaborationType(value);
                      setStudentOpportunityType("");
                    }}
                    required
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select Collaboration Type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="students">Students</SelectItem>
                      <SelectItem value="professors">Professors</SelectItem>
                      <SelectItem value="industries">Industries</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {collaborationType === "students" && (
                  <div>
                    <Label>Student Opportunity Type</Label>
                    <Select
                      name="studentOpportunityType"
                      value={studentOpportunityType}
                      onValueChange={setStudentOpportunityType}
                      required
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select Opportunity Type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="INTERNSHIP">Internship</SelectItem>
                        <SelectItem value="PHD_POSITION">
                          PhD Position
                        </SelectItem>
                        <SelectItem value="RND_PROJECT">
                          Research Project
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                )}

                <div>
                  <Label htmlFor="project-topic">Topic</Label>
                  <Input
                    id="project-topic"
                    name="topic"
                    placeholder="Enter project topic"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="project-content">Content</Label>
                  <Textarea
                    id="project-content"
                    name="content"
                    placeholder="Enter project content"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="project-timeline">Timeline</Label>
                  <Input id="project-timeline" name="timeline" type="date" />
                </div>

                <div>
                  <Label htmlFor="project-tags">Tags (comma separated)</Label>
                  <Input
                    id="project-tags"
                    name="tags"
                    placeholder="e.g., AI, Machine Learning, Data Science"
                  />
                </div>

                {collaborationType === "students" && (
                  <>
                    <div>
                      <Label htmlFor="project-eligibility">Eligibility</Label>
                      <Input
                        id="project-eligibility"
                        name="eligibility"
                        placeholder="Enter eligibility criteria"
                      />
                    </div>

                    <div>
                      <Label htmlFor="durationStartDate">Start Date</Label>
                      <Input
                        id="durationStartDate"
                        name="durationStartDate"
                        type="date"
                        required
                        className="..."
                      />
                    </div>
                    <div>
                      <Label htmlFor="durationEndDate">End Date</Label>
                      <Input
                        id="durationEndDate"
                        name="durationEndDate"
                        type="date"
                        required
                        className="..."
                      />
                    </div>
                    <div>
                      <Label>Is Funded</Label>
                      <Select name="isFunded" required>
                        <SelectTrigger>
                          <SelectValue placeholder="Select funding status" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="true">Yes</SelectItem>
                          <SelectItem value="false">No</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="project-fund-details">Fund Details</Label>
                      <Input
                        id="project-fund-details"
                        name="fundDetails"
                        placeholder="Enter fund details"
                      />
                    </div>
                    <div>
                      <Label htmlFor="project-desirable">
                        Desirable Skills
                      </Label>
                      <Input
                        id="project-desirable"
                        name="desirable"
                        placeholder="Enter desirable skills"
                      />
                    </div>
                  </>
                )}

                {collaborationType === "industries" && (
                  <>
                    <div>
                      <Label htmlFor="project-tech-description">
                        Technology Description
                      </Label>
                      <Input
                        id="project-tech-description"
                        name="techDescription"
                        placeholder="Enter technology description"
                      />
                    </div>
                    <div>
                      <Label htmlFor="project-requirements">Requirements</Label>
                      <Textarea
                        id="project-requirements"
                        name="requirements"
                        placeholder="Enter project requirements"
                      />
                    </div>
                  </>
                )}

                <Button
                  type="submit"
                  disabled={isCreatingProject}
                  className="bg-[#eb5e17] hover:bg-[#472014] text-white w-full"
                >
                  {isCreatingProject ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Creating...
                    </>
                  ) : (
                    "Create Project"
                  )}
                </Button>
              </form>
            </div>
          </DialogContent>
        </Dialog>
        {/* Fellow Professors Projects */}
        <Card className="border border-[#eb5e17] bg-white">
          <CardHeader>
            <CardTitle className="flex items-center text-2xl font-bold text-[#472014]">
              <Briefcase className="mr-2 text-[#eb5e17]" />
              Projects for Fellow Professors
            </CardTitle>
          </CardHeader>
          <CardContent>
            {fellowProfessorProjects.length > 0 ? (
              <ul className="space-y-4">
                {fellowProfessorProjects.map((project) => (
                  <li
                    key={project.id}
                    className="border-b border-[#eb5e17] pb-4 last:border-b-0"
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="text-lg font-semibold text-[#472014]">
                        {project.topic}
                      </h4>
                      <Badge
                        variant="secondary"
                        className="bg-[#686256] text-white"
                      >
                        {project.status}
                      </Badge>
                    </div>
                    <p className="text-sm text-[#686256] mb-2">
                      {project.content.substring(0, 100)}...
                    </p>
                    <div className="flex items-center space-x-4 text-sm text-[#472014]">
                      <div className="flex items-center">
                        <User className="mr-1 h-4 w-4" />
                        <span>{project.professor?.fullName}</span>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-center text-[#686256]">
                No projects available.
              </p>
            )}
          </CardContent>
        </Card>

        {/* Industry Projects */}
        <Card className="border border-[#eb5e17] bg-white">
          <CardHeader>
            <CardTitle className="flex items-center text-2xl font-bold text-[#472014]">
              <Building className="mr-2 text-[#eb5e17]" />
              Projects for Industry Collaboration
            </CardTitle>
          </CardHeader>
          <CardContent>
            {industryProjects.length > 0 ? (
              <ul className="space-y-4">
                {industryProjects.map((project) => (
                  <li
                    key={project.id}
                    className="border-b border-[#eb5e17] pb-4 last:border-b-0"
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="text-lg font-semibold text-[#472014]">
                        {project.topic}
                      </h4>
                      <Badge
                        variant="secondary"
                        className="bg-[#686256] text-white"
                      >
                        {project.status}
                      </Badge>
                    </div>
                    <p className="text-sm text-[#686256] mb-2">
                      {project.content.substring(0, 100)}...
                    </p>
                    <div className="flex items-center space-x-4 text-sm text-[#472014]">
                      <div className="flex items-center">
                        <User className="mr-1 h-4 w-4" />
                        <span>{project.professor?.fullName}</span>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-center text-[#686256]">
                No projects available.
              </p>
            )}
          </CardContent>
        </Card>

        {/* Student Projects */}
        <Card className="border border-[#eb5e17] bg-white">
          <CardHeader>
            <CardTitle className="flex items-center text-2xl font-bold text-[#472014]">
              <GraduationCap className="mr-2 text-[#eb5e17]" />
              Projects for Students
            </CardTitle>
          </CardHeader>
          <CardContent>
            {/* R&D Projects */}
            <h3 className="text-xl font-semibold mb-2 text-[#472014]">
              R&D Projects
            </h3>
            {studentProjects.rnd.length > 0 ? (
              <ul className="space-y-4 mb-6">
                {studentProjects.rnd.map((project) => (
                  <li
                    key={project.id}
                    className="border-b border-[#eb5e17] pb-4 last:border-b-0"
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="text-lg font-semibold text-[#472014]">
                        {project.topic}
                      </h4>
                      <Badge
                        variant="secondary"
                        className="bg-[#686256] text-white"
                      >
                        {project.status}
                      </Badge>
                    </div>
                    <p className="text-sm text-[#686256] mb-2">
                      {project.content.substring(0, 100)}...
                    </p>
                    <div className="flex items-center space-x-4 text-sm text-[#472014]">
                      <div className="flex items-center">
                        <User className="mr-1 h-4 w-4" />
                        <span>{project.professor?.fullName}</span>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-center text-[#686256]">
                No R&D projects available.
              </p>
            )}

            {/* PhD Projects */}
            <h3 className="text-xl font-semibold mb-2 text-[#472014]">
              PhD Positions
            </h3>
            {studentProjects.phd.length > 0 ? (
              <ul className="space-y-4 mb-6">
                {studentProjects.phd.map((project) => (
                  <li
                    key={project.id}
                    className="border-b border-[#eb5e17] pb-4 last:border-b-0"
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="text-lg font-semibold text-[#472014]">
                        {project.topic}
                      </h4>
                      <Badge
                        variant="secondary"
                        className="bg-[#686256] text-white"
                      >
                        {project.status}
                      </Badge>
                    </div>
                    <p className="text-sm text-[#686256] mb-2">
                      {project.content.substring(0, 100)}...
                    </p>
                    <div className="flex items-center space-x-4 text-sm text-[#472014]">
                      <div className="flex items-center">
                        <User className="mr-1 h-4 w-4" />
                        <span>{project.professor?.fullName}</span>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-center text-[#686256]">
                No PhD positions available.
              </p>
            )}

            {/* Internship Projects */}
            <h3 className="text-xl font-semibold mb-2 text-[#472014]">
              Internship Opportunities
            </h3>
            {studentProjects.internship.length > 0 ? (
              <ul className="space-y-4">
                {studentProjects.internship.map((project) => (
                  <li
                    key={project.id}
                    className="border-b border-[#eb5e17] pb-4 last:border-b-0"
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="text-lg font-semibold text-[#472014]">
                        {project.topic}
                      </h4>
                      <Badge
                        variant="secondary"
                        className="bg-[#686256] text-white"
                      >
                        {project.status}
                      </Badge>
                    </div>
                    <p className="text-sm text-[#686256] mb-2">
                      {project.content.substring(0, 100)}...
                    </p>
                    <div className="flex items-center space-x-4 text-sm text-[#472014]">
                      <div className="flex items-center">
                        <User className="mr-1 h-4 w-4" />
                        <span>{project.professor?.fullName}</span>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-center text-[#686256]">
                No internship opportunities available.
              </p>
            )}
          </CardContent>
        </Card>
        <Card className="border border-[#eb5e17] bg-white">
          <CardHeader>
            <CardTitle className="flex items-center text-2xl font-bold text-[#472014]">
              <Briefcase className="mr-2 text-[#eb5e17]" />
              My Projects
            </CardTitle>
          </CardHeader>
          <CardContent>
            {projects.length > 0 ? (
              <ul className="space-y-4">
                {projects.map((project) => (
                  <li
                    key={project.id}
                    className="border-b border-[#eb5e17] pb-4 last:border-b-0"
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="text-lg font-semibold text-[#472014]">
                        {project.topic}
                      </h4>
                      <Badge
                        variant="secondary"
                        className="bg-[#686256] text-white"
                      >
                        {project.status}
                      </Badge>
                    </div>
                    <p className="text-sm text-[#686256] mb-2">
                      {project.content.substring(0, 100)}...
                    </p>
                    <div className="flex items-center space-x-4 text-sm text-[#472014]">
                      <div className="flex items-center">
                        <User className="mr-1 h-4 w-4" />
                        <span>{project.professor?.fullName}</span>
                      </div>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      className="mt-2"
                      onClick={() => toggleApplicants(project.id)}
                    >
                      {appliedApplicantsMap[project.id] ? "Hide" : "View"}{" "}
                      Applicants
                    </Button>
                    {appliedApplicantsMap[project.id] && (
                      <div className="mt-4">
                        <h5 className="text-md font-semibold mb-2">
                          Applicants:
                        </h5>
                        {isLoadingApplicants[project.id] ? (
                          <Loader2 className="h-6 w-6 animate-spin text-[#eb5e17]" />
                        ) : appliedApplicantsMap[project.id].length > 0 ? (
                          <ul className="space-y-2">
                            {appliedApplicantsMap[project.id].map(
                              (applicant) => (
                                <li
                                  key={applicant.id}
                                  className="flex items-center space-x-4"
                                >
                                  <div>
                                    <p className="font-semibold">
                                      {applicant.name}
                                    </p>
                                    <p className="text-sm text-gray-600">
                                      {applicant.email}
                                    </p>
                                    <p className="text-sm text-gray-600">
                                      {applicant.phoneNumber}
                                    </p>
                                    {/* Include other relevant details */}
                                  </div>
                                  {/* You can add buttons to accept/reject the application */}
                                </li>
                              )
                            )}
                          </ul>
                        ) : (
                          <p>No applicants yet.</p>
                        )}
                      </div>
                    )}
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-center text-[#686256]">
                No projects available.
              </p>
            )}
          </CardContent>
        </Card>
      </motion.div>
    </TabsContent>
  );
