// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                String              @id @default(cuid())
  fullName          String
  email             String              @unique
  password          String
  phoneNumber       String
  location          String
  imageUrl          String?
  university        String
  course            String
  researchHighlights ResearchHighlight[]
  experience        String
  education         Education[]
  achievements      Achievement[]
  
  discussions       Discussion[]
  comments          Comment[]
  projects          Project[]
  
  superAdmin        SuperAdmin?         @relation(fields: [superAdminId], references: [id])
  superAdminId      String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ResearchHighlight {
  id        String   @id @default(cuid())
  title     String
  status    String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
}

model Education {
  id          String   @id @default(cuid())
  degree      String
  institution String
  passingYear String
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
}

model Achievement {
  id          String   @id @default(cuid())
  year        String
  description String
  student     Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String?
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId String?
}

model Professor {
  id                String    @id @default(cuid())
  fullName          String
  email             String    @unique
  password          String
  phoneNumber       String
  location          String
  photoUrl          String?
  title             String
  university        String
  website           String?
  degree            String
  department        String
  position          String
  researchInterests String
  positions         Position[]
  achievements      Achievement[]
  
  answers           Answer[]
  blogs             Blog[]
  comments          Comment[]
  projects          Project[]
  webinars          Webinar[]
  
  superAdmin        SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId      String?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Position {
  id          String    @id @default(cuid())
  title       String
  institution String
  startYear   String
  endYear     String?
  current     Boolean   @default(false)
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId String
}

model Business {
  id          String @id @default(cuid())
  companyName String
  email       String @unique
  password    String
  phoneNumber String
  location    String
  industry    String
  description String
  website     String?
  profileImageUrl String?
  
  projects    Project[]
  answers     Answer[]
  blogs       Blog[]
  comments    Comment[]
  
  superAdmin  SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Discussion {
  id           String    @id @default(cuid())
  title        String
  description  String
  category     String
  subcategory  String
  status       DiscussionStatus @default(UNANSWERED)
  
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String

  upvotes      Int       @default(0)
  downvotes    Int       @default(0)
  answers      Answer[]
  answerCount  Int       @default(0)
  
  votes        Vote[]

  superAdmin   SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Vote {
  id           String    @id @default(cuid())
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId String
  userId       String
  userType     UserType
  voteType     VoteType

  @@unique([discussionId, userId, userType])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Answer {
  id           String     @id @default(cuid())
  content      String
  
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId String

  professor    Professor? @relation(fields: [professorId], references: [id], onDelete: SetNull)
  professorId  String?
  
  business     Business?  @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId   String?

  upvotes      Int        @default(0)
  downvotes    Int        @default(0)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Blog {
  id          String    @id @default(cuid())
  title       String
  content     String
  likes       Int       @default(0)
  dislikes    Int       @default(0)
  comments    Comment[]
  authorType  BlogAuthorType?
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: SetNull)
  professorId String?
  business    Business?  @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId  String?
  blogImage   String?
  
  blogLikes   BlogLike[]

  superAdmin  SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      String
  userType    UserType
  
  student     Student?  @relation(fields: [studentId], references: [id], onDelete: SetNull)
  studentId   String?
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: SetNull)
  professorId String?
  business    Business?  @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId  String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BlogLike {
  id        String  @id @default(cuid())
  blog      Blog    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  userId    String
  isLike    Boolean

  @@unique([blogId, userId])
}

model Project {
  id          String    @id @default(cuid())
  topic       String 
  content     String
  difficulty  Difficulty
  timeline    DateTime
  tags        String[]
  status      Status
  type        ProjectType
  
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: SetNull)
  professorId String?
  business    Business?  @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId  String?
  student     Student?   @relation(fields: [studentId], references: [id], onDelete: SetNull)
  studentId   String?

  appliedProfessors AppliedProfessor[] // for business
  appliedStudents   AppliedStudent[]  // for professor

  superAdmin  SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
} 



enum ProjectType {
  BUSINESS
  PROFESSOR
}

enum BlogAuthorType {
  PROFESSOR
  BUSINESS
}

model Webinar {
  id          String    @id @default(cuid())
  title       String
  topic       String
  place       String
  date        DateTime
  status      WebinarStatus @default(PENDING)
  
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId String

  maxAttendees Int?
  duration    Int?
  isOnline    Boolean   @default(true)
  meetingLink String?
  webinarImage String?
  
  superAdmin  SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SuperAdmin {
  id              String @id @default(cuid())
  email           String @unique
  password        String
  name            String
  
  managedStudents Student[]
  managedProfessors Professor[]
  managedBusinesses Business[]
  managedDiscussions Discussion[]
  managedBlogs    Blog[]
  managedProjects Project[]
  managedWebinars Webinar[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum DiscussionStatus {
  ANSWERED
  UNANSWERED
}

enum UserType {
  PROFESSOR
  STUDENT
}

enum Difficulty {
  EASY
  INTERMEDIATE
  HARD
}

enum Status {
  OPEN
  ONGOING
  CLOSED
}

enum WebinarStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

model Contact {
  id        String   @id @default(cuid())
  email     String
  fullName  String
  subject   String
  phoneNumber String?
  message   String
  createdAt DateTime @default(now())
}


model AppliedProfessor {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  professorId String
  name        String
  email       String
  phoneNumber String

  createdAt   DateTime @default(now())

  @@unique([projectId, professorId])
}

model AppliedStudent {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  studentId   String
  name        String
  email       String
  phoneNumber String

  createdAt   DateTime @default(now())

  @@unique([projectId, studentId])
}