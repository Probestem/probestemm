// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") 
}

model Publisher {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
}

model Student {
  id                String              @id @default(cuid())
  fullName          String
  email             String              @unique
  password          String
  phoneNumber       String?
  location          String?
  imageUrl          String?
  university        String?
  course            String?
  researchHighlights ResearchHighlight[]
  experience        String?
  idCard            String?
  education         Education[]
  achievements      Achievement[]
  
  discussions       Discussion[]
  comments          Comment[]
  projects          Project[]
  notifications     Notification[]
  
  superAdmin        SuperAdmin?         @relation(fields: [superAdminId], references: [id])
  superAdminId      String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ResearchHighlight {
  id        String   @id @default(cuid())
  title     String
  status    String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
}

model Education {
  id          String   @id @default(cuid())
  degree      String
  institution String
  passingYear String
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
}

model Achievement {
  id          String   @id @default(cuid())
  year        String
  description String
  student     Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String?
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId String?
}

model Professor {
  id                String    @id @default(cuid())
  fullName          String
  email             String    @unique
  password          String
  phoneNumber       String?
  location          String?
  photoUrl          String?
  title             String?
  university        String?
  website           String
  degree            String?
  department        String?
  position          String?
  bio               String?
  googleScholar     String?
  isApproved        Boolean   @default(false)  
  idCard            String?
  researchInterests ResearchInterest[] 
  tags              ProfessorTag[]      
  positions         Position[]
  achievements      Achievement[]
  answers           Answer[]
  blogs             Blog[]
  comments          Comment[]
  projects          Project[]
  webinars          Webinar[]
  notifications     Notification[]
  patents           Patent[]
  
  superAdmin        SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId      String?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ResearchInterest {
  id          String    @id @default(cuid())
  title       String
  description String?
  imageUrl    String[]
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId String
}

model ProfessorTag {
  id           String    @id @default(cuid())
  category     String
  subcategory  String
  professor    Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId  String
  notifications     Notification[]

  @@unique([professorId, category, subcategory])
}

model Position {
  id          String    @id @default(cuid())
  title       String
  institution String
  startYear   String
  endYear     String?
  current     Boolean   @default(false)
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId String
}

model Business {
  id          String @id @default(cuid())
  companyName String
  email       String @unique
  password    String
  phoneNumber String?
  location    String?
  industry    String?
  description String?
  website     String?
  profileImageUrl String?
  idCard    String?
  
  projects    Project[]
  answers     Answer[]
  blogs       Blog[]
  comments    Comment[]
  notifications     Notification[]
  
  superAdmin  SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Discussion {
  id           String    @id @default(cuid())
  title        String
  description  String
  category     String
  subcategory  String
  status       DiscussionStatus @default(UNANSWERED)
  
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String

  upvotes      Int       @default(0)
  downvotes    Int       @default(0)
  answers      Answer[]
  answerCount  Int       @default(0)
  
  votes        Vote[]
   notifications     Notification[]

  superAdmin   SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Vote {
  id           String    @id @default(cuid())
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId String
  userId       String
  userType     UserType
  voteType     VoteType

  @@unique([discussionId, userId, userType])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Answer {
  id           String     @id @default(cuid())
  content      String
  
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId String

  professor    Professor? @relation(fields: [professorId], references: [id], onDelete: SetNull)
  professorId  String?
  
  business     Business?  @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId   String?

  upvotes      Int        @default(0)
  downvotes    Int        @default(0)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Blog {
  id          String    @id @default(cuid())
  title       String
  content     String
  likes       Int       @default(0)
  dislikes    Int       @default(0)
  comments    Comment[]
  authorType  BlogAuthorType?
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: SetNull)
  professorId String?
  business    Business?  @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId  String?
  blogImage   String?
  
  blogLikes   BlogLike[]
   notifications     Notification[]

  superAdmin  SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      String
  userType    UserType
  
  student     Student?  @relation(fields: [studentId], references: [id], onDelete: SetNull)
  studentId   String?
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: SetNull)
  professorId String?
  business    Business?  @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId  String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BlogLike {
  id        String  @id @default(cuid())
  blog      Blog    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  userId    String
  isLike    Boolean

  @@unique([blogId, userId])
}

enum ProjectType {
BUSINESS_PROJECT  
  PROFESSOR_PROJECT
  STUDENT_PROPOSAL
}

enum ProposalCategory {
  PROJECT
  INTERNSHIP
  PHD_POSITION
  PROFESSOR_COLLABORATION
  STUDENT_OPPORTUNITY 
  INDUSTRY_COLLABORATION 
  TECHNOLOGY_SOLUTION
  RND_PROJECT 
}

model Project {
  id          String    @id @default(cuid())
  topic       String? 
  content     String?    // Main description field
  type        ProjectType
  category    ProposalCategory @default(PROJECT)
  status      Status
  
  // Common fields
  timeline    DateTime?
  tags        String[]
  
  // Fields for academic opportunities
  eligibility String?
  duration    Duration?
  isFunded    Boolean?
  fundDetails String?
  desirable   String?
  selectedApplicationId String?
  // Fields for technology/industry projects
  techDescription String?
  requirements    String?
  
  // Relations to users
  professor   Professor? @relation(fields: [professorId], references: [id], onDelete: SetNull)
  professorId String?
  business    Business?  @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId  String?
  student     Student?   @relation(fields: [studentId], references: [id], onDelete: SetNull)
  studentId   String?

  // Applications
  professorApplications ProfessorApplication[]
  studentApplications   StudentApplication[]
  businessApplications  BusinessApplication[]
  
  notifications     Notification[]

  superAdmin  SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Duration {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String   @unique
}

// Updated application models to include descriptions and images
model ProfessorApplication {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  professorId String
  name        String
  email       String?
  phoneNumber String?
  description String   // Added field for response description
  images      String[] // Added field for attached images
  createdAt   DateTime @default(now())

  @@unique([projectId, professorId])
}

model StudentApplication {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  studentId   String
  name        String
  email       String?
  phoneNumber String?
  description String   // Added field for response description
  images      String[] // Added field for attached images
  createdAt   DateTime @default(now())

  @@unique([projectId, studentId])
}

model BusinessApplication {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  businessId  String
  name        String
  email       String?
  phoneNumber String?
  description String   // Added field for response description
  images      String[] // Added field for attached images
  createdAt   DateTime @default(now())

  @@unique([projectId, businessId])
}

enum Status {
  OPEN
  ONGOING
  CLOSED
}

enum BlogAuthorType {
  PROFESSOR
  BUSINESS
}

model Webinar {
  id          String    @id @default(cuid())
  title       String
  topic       String
  place       String
  date        DateTime
  status      WebinarStatus @default(PENDING)
  
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId String

  maxAttendees Int?
  duration    Int?
  isOnline    Boolean   @default(true)
  meetingLink String?
  webinarImage String?
  webinarDocument String? 
  notifications     Notification[]
  
  superAdmin  SuperAdmin? @relation(fields: [superAdminId], references: [id])
  superAdminId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SuperAdmin {
  id              String @id @default(cuid())
  email           String @unique
  password        String
  name            String
  
  managedStudents Student[]
  managedProfessors Professor[]
  managedBusinesses Business[]
  managedDiscussions Discussion[]
  managedBlogs    Blog[]
  managedProjects Project[]
  managedWebinars Webinar[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum DiscussionStatus {
  ANSWERED
  UNANSWERED
}

enum UserType {
  PROFESSOR
  STUDENT
}

enum WebinarStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

model Contact {
  id        String   @id @default(cuid())
  email     String
  fullName  String
  subject   String
  phoneNumber String?
  message   String
  createdAt DateTime @default(now())
}




enum NotificationType {
  COMMENT
  LIKE
  DISLIKE
  WEBINAR_STATUS
  DISCUSSION_ANSWER
  DISCUSSION_VOTE
  PROJECT_APPLICATION
  PATENT_APPLICATION
  PROFESSOR_TAG
  DISCUSSION_TAG
  PROFESSOR_APPROVAL
}

model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  redirectionLink String?

  // Recipients
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  professor Professor? @relation(fields: [professorId], references: [id])
  professorId String?
  business  Business? @relation(fields: [businessId], references: [id])
  businessId String?

  // Related entities
  blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?
  webinar   Webinar? @relation(fields: [webinarId], references: [id])
  webinarId String?
  discussion Discussion? @relation(fields: [discussionId], references: [id])
  discussionId String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  patent    Patent?  @relation(fields: [patentId], references: [id])

  patentId  String?

  professorTag ProfessorTag? @relation(fields: [professorTagId], references: [id])
  professorTagId String?

}


model FAQ {
  id        String   @id @default(cuid())
  question  String   @db.Text
  answer    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Patent {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String[]
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId String
  notifications     Notification[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
}

// ip address model
model UserAccess {
  id         String   @id @default(cuid())
  emailId    String
  fullName   String
  ipAddress  String
  accessTime DateTime @default(now())
}

model ChatRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define user types and IDs
  userOneId   String
  userOneType UserRole
  userTwoId   String 
  userTwoType UserRole

  messages Message[]

  @@unique([userOneId, userTwoId])
}

// Individual messages in a chat
model Message {
  id        String   @id @default(cuid())
  content   String   // Text content
  mediaUrls String[] // Array of media URLs (images, documents)
  mediaType String?  // Type of media (image, document, etc.)
  
  senderId  String   // ID of the sender
  senderType UserRole // Type of the sender (STUDENT, PROFESSOR, BUSINESS)
  
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String

  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  student
  professor
  business
}